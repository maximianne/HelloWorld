package com.example.helloworld;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends AppCompatActivity {
    //define these variables outside of methods so class as access
    private Button button_hi;
    private int number =0;
    private TextView textView_count;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        //autogenerated, part of the android life cycle.
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main); //links it to the XML layout called actuuty main
        //find button
        button_hi=findViewById(R.id.button_hello); //you don't need to cast
        textView_count= findViewById(R.id.textView_count);
        //add an event listener to listen for the clicj
        //now i know what button I need to listen for
        button_hi.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v) {
            //handle what happens after I click
               // sayHello(v);
                launchNextActivity(v);
            }
        });
        //when click happens, I do something.
    }
    // try to seperate stuff, dont put everything together
    //on my onclick, i call this method to say hello
    public void sayHello(View view){
        //create a toast (saying) hello
        Toast toast= Toast.makeText(this, R.string.toast_message, Toast.LENGTH_SHORT);
        //short means it shows for 2 seconds
        //long, something longer than short
        toast.show();
    }
    public void countUp(View view){  //in the count up button, i added countUp() on the onClick attribute
        //use this method to increment the value of number
        //set the text of the textview to the number
        number++;
        //when you see an object, you want to check that it is not null before you access it
        if(textView_count!=null){
            textView_count.setText(Integer.toString(number)); //setText takes a strings, that is why you have to do a toString
        }
    }

    public void countDown(View view){
        if(number>0) {
            number--;
        }
        if(textView_count!=null){
            textView_count.setText(Integer.toString(number));
        }
    }

    public void launchNextActivity(View view){
        //create an intent and specificy from and to
        Intent intent= new Intent(this, SecondActivity.class);
        //data feild
        //intent extras
        //both can pack data and send to targeted activity
        //intent extras:
        //key.value pairs in Bundle
        //I want to pass the count number through intent to second activity and display in second activity
        //5 was passed
        String message= textView_count.getText().toString();
        intent.putExtra("count", message);

//        startActivity(intent);

        startActivityForResult(intent, 1); //anything less than 0 means reply is not requested
    }
    //do something when the result is recieved
    //a lifecycle method

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if(requestCode==1){
            if(resultCode==RESULT_OK) {
                String reply= data.getStringExtra("replyCount");
                textView_count.setText(reply);
            }
        }
    }
}